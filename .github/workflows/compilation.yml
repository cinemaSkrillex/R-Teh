name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check_release.outputs.release }}
      build: ${{ steps.check_build.outputs.build }}

    steps:
    - uses: actions/checkout@v2

    - name: Run check_format script
      run: ./Scripts/check_format.sh
    
    - name: Display error message on failure
      if: failure()
      run: echo "Code formatting issues detected. Please run './Scripts/format_all.sh' to fix them."

    - name: Check for release keyword
      id: check_release
      run: |
        if git log -1 --pretty=%B | grep -q "\[RELEASE\]"; then
          echo "::set-output name=release::true"
        else
          echo "::set-output name=release::false"
        fi
    - name: Check for build keyword
      id: check_build
      run: |
        if git log -1 --pretty=%B | grep -q "\[BUILD\]"; then
          echo "::set-output name=build::true"
        else
          echo "::set-output name=build::false"
        fi

  build-linux:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.build == 'true'

    steps:
    - uses: actions/checkout@v2

    - name: apt update
      run: sudo apt-get update

    - name: install dependencies
      run: sudo apt-get install -y cmake make g++ curl zip unzip ninja-build automake libtool build-essential libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev

    - name: Install vcpkg (clone)
      run: git clone https://github.com/microsoft/vcpkg.git

    - name: Add Ninja to PATH
      run: echo "/usr/bin/ninja" >> $GITHUB_PATH

    - name: Verify Ninja path
      run: echo $PATH

    - name: Configure CMake
      run: cmake -G Ninja --preset linux

    - name: Build
      run: cd build && cmake .. && cmake --build .

    - name: Archive Linux build artifacts
      run: zip -r linux-build-artifacts.zip build/

    - name: Upload build artifacts
      if: needs.check-release.outputs.release == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build-artifacts
        path: linux-build-artifacts.zip

  build-windows:
    runs-on: windows-latest
    needs: check-release
    if : needs.check-release.outputs.build == 'true'

    steps:
    - uses: actions/checkout@v2

    - name : install cmake
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' && refreshenv
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg install

    - name: Configure CMake
      run: cmake --preset windows-release

    - name: Build
      run: cd build && cmake .. && cmake --build .
    
    - name: Archive Windows build artifacts
      run: powershell Compress-Archive -Path build\* -DestinationPath windows-build-artifacts.zip

    - name: Upload build artifacts
      if: needs.check-release.outputs.release == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-artifacts
        path: windows-build-artifacts.zip 

  download-artifacts:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v2

    - name: Download Linux build artifacts
      if: needs.build-linux.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: linux-build-artifacts
        path: linux-build/

    - name: Download Windows build artifacts
      if: needs.build-windows.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: windows-build-artifacts
        path: windows-build/

    - name: Check for release keyword
      id: check_release
      run: |
        if git log -1 --pretty=%B | grep -q "\[RELEASE\]"; then
          echo "::set-output name=release::true"
        else
          echo "::set-output name=release::false"
        fi

    - name: Determine next version
      id: get_version
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "")
        if [ -z "$latest_tag" ]; then
          next_version="v1.0.0"
        else
          IFS='.' read -r -a version_parts <<< "$latest_tag"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          if [ "$patch" -ge 9 ]; then
            patch=0
            if [ "$minor" -ge 9 ]; then
              minor=0
              major=$((major + 1))
            else
              minor=$((minor + 1))
            fi
          else
            patch=$((patch + 1))
          fi
          next_version="$major.$minor.$patch"
        fi
        echo "::set-output name=next_version::$next_version"

    - name: Create GitHub Release
      id: create_release
      if: steps.check_release.outputs.release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.next_version }}
        release_name: Release ${{ steps.get_version.outputs.next_version }}
        draft: false
        prerelease: false

    - name: Upload Linux build artifacts to release
      if: needs.build-linux.result == 'success' && steps.check_release.outputs.release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linux-build/linux-build-artifacts.zip
        asset_name: linux-build-artifacts.zip
        asset_content_type: application/zip
  
    - name: Upload Windows build artifacts to release
      if: needs.build-windows.result == 'success' && steps.check_release.outputs.release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-build/windows-build-artifacts.zip
        asset_name: windows-build-artifacts.zip
        asset_content_type: application/zip